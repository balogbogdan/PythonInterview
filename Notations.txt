#Order of operations:
-Parantheses have the highest precedence
-Exponentiation has the next highest precedence
-Multiplication and division
-Addition and substraction


#Logical operators:
and, or, not

qoutient //
remainder %


#Try and except (error handling)
try:
    do something
except:
    print("you did something wrong")


#Shortcircuiting the evaluation
When Python detects that there is nothing to be gained by evaluating the rest
of a logical expression, it stops its evaluation and does not do the computations
in the rest of the logical expression. When the evaluation of a logical expression
stops because the overall value is already known, it is called short-circuiting the
evaluation


#Functions

''' Why use functions ??
-creating a new function gives you the opportunity to name a group of statements, which makes your program easier to
read , understand and debug.
-make a program smaller by eliminating repetitive code, later if you make a change, you only do it in a single place
-divide a program in functions gives you easier acces and easier debugging the program in parts and then put it together
as a whole
-well designed functions are often useful for many programs. once you write it and debug it you can reuse it



-built-in functions: min, max, len, type, dir(shows the methods of a library)

-random numbers
import random
for i in range(10):
    x = random.random()
    print(x)

to choose from a low and high number
random.randint(5,10) returns a number between low and high

to chose an element from a sequence at random:
t = [1,3,7]
random.choice(t)

- math functions

-parameters and arguments
the arguments are assigned to variables called parameters
def sarakii(integer, string):
    bla bla
sarakii(4, "maimu") astea din paranteza sunt argumente pentru parametrii integer si string

- void functions and fruitfull
math functions may be called fruitfull

some functions like print_twice, perform actions but do not return anything
'''


'''
#iterations
-The while statement:
while True:
    do something


- we can use the break statement to get out of the loop

- use of continue statement to go to the next iteration without finishing the body of the loop for curent iteration

while True:
    line = input('> ')
    if line[0] == '#':
        continue
    if line == 'done':
        break
    print(line)
print('Done!')


- using the for loop:
friends = ['Joseph', 'Glenn', 'Sally']
for friend in friends:
    print('Happy New Year:', friend)
print('Done!')

'''END


''' Strings
#string comparison python takes Pineaple before banana because it is Uppercase

#dir the available functions

#type shows the type of an object

#using the strip method you remove whitespaces(spaces, tabs, newlines
#the strip method doesn't remove the single space between words

#traversal (traversating the string):
index = 0
while index < len(fruit):
    letter = fruit[index]
    print(letter)
    index = index + 1

#string slice
s = 'Monty Python'
print(s[0:5]) (monty)
print(s[6:13])(python)

# strings are immutable

#strings methods:
- string.capitalize("banana") makes Banana
- string.startswith("have" or 'm')
- lower
- upper

#parsing strings
>>> data = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
>>> atpos = data.find('@')
>>> print(atpos)
21
>>> sppos = data.find(' ',atpos)
>>> print(sppos)
31
>>> host = data[atpos+1:sppos]
>>> print(host)
uct.ac.za

#format operator for strings
>>> camels = 42
>>> 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'

'''END

